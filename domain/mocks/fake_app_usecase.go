// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/DueIt-Jasanya-Aturuang/doraemon/domain/dto"
	"github.com/DueIt-Jasanya-Aturuang/doraemon/domain/usecase"
)

type FakeAppUsecase struct {
	CheckAppByIDStub        func(context.Context, *dto.AppReq) error
	checkAppByIDMutex       sync.RWMutex
	checkAppByIDArgsForCall []struct {
		arg1 context.Context
		arg2 *dto.AppReq
	}
	checkAppByIDReturns struct {
		result1 error
	}
	checkAppByIDReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAppUsecase) CheckAppByID(arg1 context.Context, arg2 *dto.AppReq) error {
	fake.checkAppByIDMutex.Lock()
	ret, specificReturn := fake.checkAppByIDReturnsOnCall[len(fake.checkAppByIDArgsForCall)]
	fake.checkAppByIDArgsForCall = append(fake.checkAppByIDArgsForCall, struct {
		arg1 context.Context
		arg2 *dto.AppReq
	}{arg1, arg2})
	stub := fake.CheckAppByIDStub
	fakeReturns := fake.checkAppByIDReturns
	fake.recordInvocation("CheckAppByID", []interface{}{arg1, arg2})
	fake.checkAppByIDMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeAppUsecase) CheckAppByIDCallCount() int {
	fake.checkAppByIDMutex.RLock()
	defer fake.checkAppByIDMutex.RUnlock()
	return len(fake.checkAppByIDArgsForCall)
}

func (fake *FakeAppUsecase) CheckAppByIDCalls(stub func(context.Context, *dto.AppReq) error) {
	fake.checkAppByIDMutex.Lock()
	defer fake.checkAppByIDMutex.Unlock()
	fake.CheckAppByIDStub = stub
}

func (fake *FakeAppUsecase) CheckAppByIDArgsForCall(i int) (context.Context, *dto.AppReq) {
	fake.checkAppByIDMutex.RLock()
	defer fake.checkAppByIDMutex.RUnlock()
	argsForCall := fake.checkAppByIDArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAppUsecase) CheckAppByIDReturns(result1 error) {
	fake.checkAppByIDMutex.Lock()
	defer fake.checkAppByIDMutex.Unlock()
	fake.CheckAppByIDStub = nil
	fake.checkAppByIDReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppUsecase) CheckAppByIDReturnsOnCall(i int, result1 error) {
	fake.checkAppByIDMutex.Lock()
	defer fake.checkAppByIDMutex.Unlock()
	fake.CheckAppByIDStub = nil
	if fake.checkAppByIDReturnsOnCall == nil {
		fake.checkAppByIDReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.checkAppByIDReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeAppUsecase) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.checkAppByIDMutex.RLock()
	defer fake.checkAppByIDMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAppUsecase) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ usecase.AppUsecase = new(FakeAppUsecase)

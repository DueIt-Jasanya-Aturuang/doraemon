// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/DueIt-Jasanya-Aturuang/doraemon/domain/dto"
	"github.com/DueIt-Jasanya-Aturuang/doraemon/domain/usecase"
)

type FakeAuthUsecase struct {
	LoginStub        func(context.Context, *dto.LoginReq) (*dto.UserResp, *dto.ProfileResp, error)
	loginMutex       sync.RWMutex
	loginArgsForCall []struct {
		arg1 context.Context
		arg2 *dto.LoginReq
	}
	loginReturns struct {
		result1 *dto.UserResp
		result2 *dto.ProfileResp
		result3 error
	}
	loginReturnsOnCall map[int]struct {
		result1 *dto.UserResp
		result2 *dto.ProfileResp
		result3 error
	}
	RegisterStub        func(context.Context, *dto.RegisterReq) (*dto.UserResp, error)
	registerMutex       sync.RWMutex
	registerArgsForCall []struct {
		arg1 context.Context
		arg2 *dto.RegisterReq
	}
	registerReturns struct {
		result1 *dto.UserResp
		result2 error
	}
	registerReturnsOnCall map[int]struct {
		result1 *dto.UserResp
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeAuthUsecase) Login(arg1 context.Context, arg2 *dto.LoginReq) (*dto.UserResp, *dto.ProfileResp, error) {
	fake.loginMutex.Lock()
	ret, specificReturn := fake.loginReturnsOnCall[len(fake.loginArgsForCall)]
	fake.loginArgsForCall = append(fake.loginArgsForCall, struct {
		arg1 context.Context
		arg2 *dto.LoginReq
	}{arg1, arg2})
	stub := fake.LoginStub
	fakeReturns := fake.loginReturns
	fake.recordInvocation("Login", []interface{}{arg1, arg2})
	fake.loginMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2, ret.result3
	}
	return fakeReturns.result1, fakeReturns.result2, fakeReturns.result3
}

func (fake *FakeAuthUsecase) LoginCallCount() int {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	return len(fake.loginArgsForCall)
}

func (fake *FakeAuthUsecase) LoginCalls(stub func(context.Context, *dto.LoginReq) (*dto.UserResp, *dto.ProfileResp, error)) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = stub
}

func (fake *FakeAuthUsecase) LoginArgsForCall(i int) (context.Context, *dto.LoginReq) {
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	argsForCall := fake.loginArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAuthUsecase) LoginReturns(result1 *dto.UserResp, result2 *dto.ProfileResp, result3 error) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = nil
	fake.loginReturns = struct {
		result1 *dto.UserResp
		result2 *dto.ProfileResp
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAuthUsecase) LoginReturnsOnCall(i int, result1 *dto.UserResp, result2 *dto.ProfileResp, result3 error) {
	fake.loginMutex.Lock()
	defer fake.loginMutex.Unlock()
	fake.LoginStub = nil
	if fake.loginReturnsOnCall == nil {
		fake.loginReturnsOnCall = make(map[int]struct {
			result1 *dto.UserResp
			result2 *dto.ProfileResp
			result3 error
		})
	}
	fake.loginReturnsOnCall[i] = struct {
		result1 *dto.UserResp
		result2 *dto.ProfileResp
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeAuthUsecase) Register(arg1 context.Context, arg2 *dto.RegisterReq) (*dto.UserResp, error) {
	fake.registerMutex.Lock()
	ret, specificReturn := fake.registerReturnsOnCall[len(fake.registerArgsForCall)]
	fake.registerArgsForCall = append(fake.registerArgsForCall, struct {
		arg1 context.Context
		arg2 *dto.RegisterReq
	}{arg1, arg2})
	stub := fake.RegisterStub
	fakeReturns := fake.registerReturns
	fake.recordInvocation("Register", []interface{}{arg1, arg2})
	fake.registerMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeAuthUsecase) RegisterCallCount() int {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	return len(fake.registerArgsForCall)
}

func (fake *FakeAuthUsecase) RegisterCalls(stub func(context.Context, *dto.RegisterReq) (*dto.UserResp, error)) {
	fake.registerMutex.Lock()
	defer fake.registerMutex.Unlock()
	fake.RegisterStub = stub
}

func (fake *FakeAuthUsecase) RegisterArgsForCall(i int) (context.Context, *dto.RegisterReq) {
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	argsForCall := fake.registerArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeAuthUsecase) RegisterReturns(result1 *dto.UserResp, result2 error) {
	fake.registerMutex.Lock()
	defer fake.registerMutex.Unlock()
	fake.RegisterStub = nil
	fake.registerReturns = struct {
		result1 *dto.UserResp
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthUsecase) RegisterReturnsOnCall(i int, result1 *dto.UserResp, result2 error) {
	fake.registerMutex.Lock()
	defer fake.registerMutex.Unlock()
	fake.RegisterStub = nil
	if fake.registerReturnsOnCall == nil {
		fake.registerReturnsOnCall = make(map[int]struct {
			result1 *dto.UserResp
			result2 error
		})
	}
	fake.registerReturnsOnCall[i] = struct {
		result1 *dto.UserResp
		result2 error
	}{result1, result2}
}

func (fake *FakeAuthUsecase) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.loginMutex.RLock()
	defer fake.loginMutex.RUnlock()
	fake.registerMutex.RLock()
	defer fake.registerMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeAuthUsecase) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ usecase.AuthUsecase = new(FakeAuthUsecase)

// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/DueIt-Jasanya-Aturuang/doraemon/domain/dto"
	"github.com/DueIt-Jasanya-Aturuang/doraemon/domain/usecase"
)

type FakeOauth2Usecase struct {
	GoogleClaimUserStub        func(context.Context, *dto.LoginGoogleReq) (*dto.LoginGoogleResp, error)
	googleClaimUserMutex       sync.RWMutex
	googleClaimUserArgsForCall []struct {
		arg1 context.Context
		arg2 *dto.LoginGoogleReq
	}
	googleClaimUserReturns struct {
		result1 *dto.LoginGoogleResp
		result2 error
	}
	googleClaimUserReturnsOnCall map[int]struct {
		result1 *dto.LoginGoogleResp
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOauth2Usecase) GoogleClaimUser(arg1 context.Context, arg2 *dto.LoginGoogleReq) (*dto.LoginGoogleResp, error) {
	fake.googleClaimUserMutex.Lock()
	ret, specificReturn := fake.googleClaimUserReturnsOnCall[len(fake.googleClaimUserArgsForCall)]
	fake.googleClaimUserArgsForCall = append(fake.googleClaimUserArgsForCall, struct {
		arg1 context.Context
		arg2 *dto.LoginGoogleReq
	}{arg1, arg2})
	stub := fake.GoogleClaimUserStub
	fakeReturns := fake.googleClaimUserReturns
	fake.recordInvocation("GoogleClaimUser", []interface{}{arg1, arg2})
	fake.googleClaimUserMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeOauth2Usecase) GoogleClaimUserCallCount() int {
	fake.googleClaimUserMutex.RLock()
	defer fake.googleClaimUserMutex.RUnlock()
	return len(fake.googleClaimUserArgsForCall)
}

func (fake *FakeOauth2Usecase) GoogleClaimUserCalls(stub func(context.Context, *dto.LoginGoogleReq) (*dto.LoginGoogleResp, error)) {
	fake.googleClaimUserMutex.Lock()
	defer fake.googleClaimUserMutex.Unlock()
	fake.GoogleClaimUserStub = stub
}

func (fake *FakeOauth2Usecase) GoogleClaimUserArgsForCall(i int) (context.Context, *dto.LoginGoogleReq) {
	fake.googleClaimUserMutex.RLock()
	defer fake.googleClaimUserMutex.RUnlock()
	argsForCall := fake.googleClaimUserArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeOauth2Usecase) GoogleClaimUserReturns(result1 *dto.LoginGoogleResp, result2 error) {
	fake.googleClaimUserMutex.Lock()
	defer fake.googleClaimUserMutex.Unlock()
	fake.GoogleClaimUserStub = nil
	fake.googleClaimUserReturns = struct {
		result1 *dto.LoginGoogleResp
		result2 error
	}{result1, result2}
}

func (fake *FakeOauth2Usecase) GoogleClaimUserReturnsOnCall(i int, result1 *dto.LoginGoogleResp, result2 error) {
	fake.googleClaimUserMutex.Lock()
	defer fake.googleClaimUserMutex.Unlock()
	fake.GoogleClaimUserStub = nil
	if fake.googleClaimUserReturnsOnCall == nil {
		fake.googleClaimUserReturnsOnCall = make(map[int]struct {
			result1 *dto.LoginGoogleResp
			result2 error
		})
	}
	fake.googleClaimUserReturnsOnCall[i] = struct {
		result1 *dto.LoginGoogleResp
		result2 error
	}{result1, result2}
}

func (fake *FakeOauth2Usecase) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.googleClaimUserMutex.RLock()
	defer fake.googleClaimUserMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOauth2Usecase) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ usecase.Oauth2Usecase = new(FakeOauth2Usecase)

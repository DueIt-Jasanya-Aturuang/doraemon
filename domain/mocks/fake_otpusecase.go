// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/DueIt-Jasanya-Aturuang/doraemon/domain/dto"
	"github.com/DueIt-Jasanya-Aturuang/doraemon/domain/usecase"
)

type FakeOTPUsecase struct {
	OTPGenerateStub        func(context.Context, *dto.OTPGenerateReq) error
	oTPGenerateMutex       sync.RWMutex
	oTPGenerateArgsForCall []struct {
		arg1 context.Context
		arg2 *dto.OTPGenerateReq
	}
	oTPGenerateReturns struct {
		result1 error
	}
	oTPGenerateReturnsOnCall map[int]struct {
		result1 error
	}
	OTPValidationStub        func(context.Context, *dto.OTPValidationReq) error
	oTPValidationMutex       sync.RWMutex
	oTPValidationArgsForCall []struct {
		arg1 context.Context
		arg2 *dto.OTPValidationReq
	}
	oTPValidationReturns struct {
		result1 error
	}
	oTPValidationReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeOTPUsecase) OTPGenerate(arg1 context.Context, arg2 *dto.OTPGenerateReq) error {
	fake.oTPGenerateMutex.Lock()
	ret, specificReturn := fake.oTPGenerateReturnsOnCall[len(fake.oTPGenerateArgsForCall)]
	fake.oTPGenerateArgsForCall = append(fake.oTPGenerateArgsForCall, struct {
		arg1 context.Context
		arg2 *dto.OTPGenerateReq
	}{arg1, arg2})
	stub := fake.OTPGenerateStub
	fakeReturns := fake.oTPGenerateReturns
	fake.recordInvocation("OTPGenerate", []interface{}{arg1, arg2})
	fake.oTPGenerateMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOTPUsecase) OTPGenerateCallCount() int {
	fake.oTPGenerateMutex.RLock()
	defer fake.oTPGenerateMutex.RUnlock()
	return len(fake.oTPGenerateArgsForCall)
}

func (fake *FakeOTPUsecase) OTPGenerateCalls(stub func(context.Context, *dto.OTPGenerateReq) error) {
	fake.oTPGenerateMutex.Lock()
	defer fake.oTPGenerateMutex.Unlock()
	fake.OTPGenerateStub = stub
}

func (fake *FakeOTPUsecase) OTPGenerateArgsForCall(i int) (context.Context, *dto.OTPGenerateReq) {
	fake.oTPGenerateMutex.RLock()
	defer fake.oTPGenerateMutex.RUnlock()
	argsForCall := fake.oTPGenerateArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeOTPUsecase) OTPGenerateReturns(result1 error) {
	fake.oTPGenerateMutex.Lock()
	defer fake.oTPGenerateMutex.Unlock()
	fake.OTPGenerateStub = nil
	fake.oTPGenerateReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeOTPUsecase) OTPGenerateReturnsOnCall(i int, result1 error) {
	fake.oTPGenerateMutex.Lock()
	defer fake.oTPGenerateMutex.Unlock()
	fake.OTPGenerateStub = nil
	if fake.oTPGenerateReturnsOnCall == nil {
		fake.oTPGenerateReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.oTPGenerateReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeOTPUsecase) OTPValidation(arg1 context.Context, arg2 *dto.OTPValidationReq) error {
	fake.oTPValidationMutex.Lock()
	ret, specificReturn := fake.oTPValidationReturnsOnCall[len(fake.oTPValidationArgsForCall)]
	fake.oTPValidationArgsForCall = append(fake.oTPValidationArgsForCall, struct {
		arg1 context.Context
		arg2 *dto.OTPValidationReq
	}{arg1, arg2})
	stub := fake.OTPValidationStub
	fakeReturns := fake.oTPValidationReturns
	fake.recordInvocation("OTPValidation", []interface{}{arg1, arg2})
	fake.oTPValidationMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeOTPUsecase) OTPValidationCallCount() int {
	fake.oTPValidationMutex.RLock()
	defer fake.oTPValidationMutex.RUnlock()
	return len(fake.oTPValidationArgsForCall)
}

func (fake *FakeOTPUsecase) OTPValidationCalls(stub func(context.Context, *dto.OTPValidationReq) error) {
	fake.oTPValidationMutex.Lock()
	defer fake.oTPValidationMutex.Unlock()
	fake.OTPValidationStub = stub
}

func (fake *FakeOTPUsecase) OTPValidationArgsForCall(i int) (context.Context, *dto.OTPValidationReq) {
	fake.oTPValidationMutex.RLock()
	defer fake.oTPValidationMutex.RUnlock()
	argsForCall := fake.oTPValidationArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeOTPUsecase) OTPValidationReturns(result1 error) {
	fake.oTPValidationMutex.Lock()
	defer fake.oTPValidationMutex.Unlock()
	fake.OTPValidationStub = nil
	fake.oTPValidationReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeOTPUsecase) OTPValidationReturnsOnCall(i int, result1 error) {
	fake.oTPValidationMutex.Lock()
	defer fake.oTPValidationMutex.Unlock()
	fake.OTPValidationStub = nil
	if fake.oTPValidationReturnsOnCall == nil {
		fake.oTPValidationReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.oTPValidationReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeOTPUsecase) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.oTPGenerateMutex.RLock()
	defer fake.oTPGenerateMutex.RUnlock()
	fake.oTPValidationMutex.RLock()
	defer fake.oTPValidationMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeOTPUsecase) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ usecase.OTPUsecase = new(FakeOTPUsecase)

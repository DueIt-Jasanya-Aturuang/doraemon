// Code generated by counterfeiter. DO NOT EDIT.
package mocks

import (
	"context"
	"sync"

	"github.com/DueIt-Jasanya-Aturuang/doraemon/domain/dto"
	"github.com/DueIt-Jasanya-Aturuang/doraemon/domain/usecase"
)

type FakeSecurityUsecase struct {
	JwtGenerateRTATStub        func(context.Context, *dto.JwtTokenReq) (*dto.JwtTokenResp, error)
	jwtGenerateRTATMutex       sync.RWMutex
	jwtGenerateRTATArgsForCall []struct {
		arg1 context.Context
		arg2 *dto.JwtTokenReq
	}
	jwtGenerateRTATReturns struct {
		result1 *dto.JwtTokenResp
		result2 error
	}
	jwtGenerateRTATReturnsOnCall map[int]struct {
		result1 *dto.JwtTokenResp
		result2 error
	}
	JwtValidateATStub        func(context.Context, *dto.JwtTokenReq, string) (bool, error)
	jwtValidateATMutex       sync.RWMutex
	jwtValidateATArgsForCall []struct {
		arg1 context.Context
		arg2 *dto.JwtTokenReq
		arg3 string
	}
	jwtValidateATReturns struct {
		result1 bool
		result2 error
	}
	jwtValidateATReturnsOnCall map[int]struct {
		result1 bool
		result2 error
	}
	LogoutStub        func(context.Context, *dto.LogoutReq) error
	logoutMutex       sync.RWMutex
	logoutArgsForCall []struct {
		arg1 context.Context
		arg2 *dto.LogoutReq
	}
	logoutReturns struct {
		result1 error
	}
	logoutReturnsOnCall map[int]struct {
		result1 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *FakeSecurityUsecase) JwtGenerateRTAT(arg1 context.Context, arg2 *dto.JwtTokenReq) (*dto.JwtTokenResp, error) {
	fake.jwtGenerateRTATMutex.Lock()
	ret, specificReturn := fake.jwtGenerateRTATReturnsOnCall[len(fake.jwtGenerateRTATArgsForCall)]
	fake.jwtGenerateRTATArgsForCall = append(fake.jwtGenerateRTATArgsForCall, struct {
		arg1 context.Context
		arg2 *dto.JwtTokenReq
	}{arg1, arg2})
	stub := fake.JwtGenerateRTATStub
	fakeReturns := fake.jwtGenerateRTATReturns
	fake.recordInvocation("JwtGenerateRTAT", []interface{}{arg1, arg2})
	fake.jwtGenerateRTATMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSecurityUsecase) JwtGenerateRTATCallCount() int {
	fake.jwtGenerateRTATMutex.RLock()
	defer fake.jwtGenerateRTATMutex.RUnlock()
	return len(fake.jwtGenerateRTATArgsForCall)
}

func (fake *FakeSecurityUsecase) JwtGenerateRTATCalls(stub func(context.Context, *dto.JwtTokenReq) (*dto.JwtTokenResp, error)) {
	fake.jwtGenerateRTATMutex.Lock()
	defer fake.jwtGenerateRTATMutex.Unlock()
	fake.JwtGenerateRTATStub = stub
}

func (fake *FakeSecurityUsecase) JwtGenerateRTATArgsForCall(i int) (context.Context, *dto.JwtTokenReq) {
	fake.jwtGenerateRTATMutex.RLock()
	defer fake.jwtGenerateRTATMutex.RUnlock()
	argsForCall := fake.jwtGenerateRTATArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSecurityUsecase) JwtGenerateRTATReturns(result1 *dto.JwtTokenResp, result2 error) {
	fake.jwtGenerateRTATMutex.Lock()
	defer fake.jwtGenerateRTATMutex.Unlock()
	fake.JwtGenerateRTATStub = nil
	fake.jwtGenerateRTATReturns = struct {
		result1 *dto.JwtTokenResp
		result2 error
	}{result1, result2}
}

func (fake *FakeSecurityUsecase) JwtGenerateRTATReturnsOnCall(i int, result1 *dto.JwtTokenResp, result2 error) {
	fake.jwtGenerateRTATMutex.Lock()
	defer fake.jwtGenerateRTATMutex.Unlock()
	fake.JwtGenerateRTATStub = nil
	if fake.jwtGenerateRTATReturnsOnCall == nil {
		fake.jwtGenerateRTATReturnsOnCall = make(map[int]struct {
			result1 *dto.JwtTokenResp
			result2 error
		})
	}
	fake.jwtGenerateRTATReturnsOnCall[i] = struct {
		result1 *dto.JwtTokenResp
		result2 error
	}{result1, result2}
}

func (fake *FakeSecurityUsecase) JwtValidateAT(arg1 context.Context, arg2 *dto.JwtTokenReq, arg3 string) (bool, error) {
	fake.jwtValidateATMutex.Lock()
	ret, specificReturn := fake.jwtValidateATReturnsOnCall[len(fake.jwtValidateATArgsForCall)]
	fake.jwtValidateATArgsForCall = append(fake.jwtValidateATArgsForCall, struct {
		arg1 context.Context
		arg2 *dto.JwtTokenReq
		arg3 string
	}{arg1, arg2, arg3})
	stub := fake.JwtValidateATStub
	fakeReturns := fake.jwtValidateATReturns
	fake.recordInvocation("JwtValidateAT", []interface{}{arg1, arg2, arg3})
	fake.jwtValidateATMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2, arg3)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fakeReturns.result1, fakeReturns.result2
}

func (fake *FakeSecurityUsecase) JwtValidateATCallCount() int {
	fake.jwtValidateATMutex.RLock()
	defer fake.jwtValidateATMutex.RUnlock()
	return len(fake.jwtValidateATArgsForCall)
}

func (fake *FakeSecurityUsecase) JwtValidateATCalls(stub func(context.Context, *dto.JwtTokenReq, string) (bool, error)) {
	fake.jwtValidateATMutex.Lock()
	defer fake.jwtValidateATMutex.Unlock()
	fake.JwtValidateATStub = stub
}

func (fake *FakeSecurityUsecase) JwtValidateATArgsForCall(i int) (context.Context, *dto.JwtTokenReq, string) {
	fake.jwtValidateATMutex.RLock()
	defer fake.jwtValidateATMutex.RUnlock()
	argsForCall := fake.jwtValidateATArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2, argsForCall.arg3
}

func (fake *FakeSecurityUsecase) JwtValidateATReturns(result1 bool, result2 error) {
	fake.jwtValidateATMutex.Lock()
	defer fake.jwtValidateATMutex.Unlock()
	fake.JwtValidateATStub = nil
	fake.jwtValidateATReturns = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeSecurityUsecase) JwtValidateATReturnsOnCall(i int, result1 bool, result2 error) {
	fake.jwtValidateATMutex.Lock()
	defer fake.jwtValidateATMutex.Unlock()
	fake.JwtValidateATStub = nil
	if fake.jwtValidateATReturnsOnCall == nil {
		fake.jwtValidateATReturnsOnCall = make(map[int]struct {
			result1 bool
			result2 error
		})
	}
	fake.jwtValidateATReturnsOnCall[i] = struct {
		result1 bool
		result2 error
	}{result1, result2}
}

func (fake *FakeSecurityUsecase) Logout(arg1 context.Context, arg2 *dto.LogoutReq) error {
	fake.logoutMutex.Lock()
	ret, specificReturn := fake.logoutReturnsOnCall[len(fake.logoutArgsForCall)]
	fake.logoutArgsForCall = append(fake.logoutArgsForCall, struct {
		arg1 context.Context
		arg2 *dto.LogoutReq
	}{arg1, arg2})
	stub := fake.LogoutStub
	fakeReturns := fake.logoutReturns
	fake.recordInvocation("Logout", []interface{}{arg1, arg2})
	fake.logoutMutex.Unlock()
	if stub != nil {
		return stub(arg1, arg2)
	}
	if specificReturn {
		return ret.result1
	}
	return fakeReturns.result1
}

func (fake *FakeSecurityUsecase) LogoutCallCount() int {
	fake.logoutMutex.RLock()
	defer fake.logoutMutex.RUnlock()
	return len(fake.logoutArgsForCall)
}

func (fake *FakeSecurityUsecase) LogoutCalls(stub func(context.Context, *dto.LogoutReq) error) {
	fake.logoutMutex.Lock()
	defer fake.logoutMutex.Unlock()
	fake.LogoutStub = stub
}

func (fake *FakeSecurityUsecase) LogoutArgsForCall(i int) (context.Context, *dto.LogoutReq) {
	fake.logoutMutex.RLock()
	defer fake.logoutMutex.RUnlock()
	argsForCall := fake.logoutArgsForCall[i]
	return argsForCall.arg1, argsForCall.arg2
}

func (fake *FakeSecurityUsecase) LogoutReturns(result1 error) {
	fake.logoutMutex.Lock()
	defer fake.logoutMutex.Unlock()
	fake.LogoutStub = nil
	fake.logoutReturns = struct {
		result1 error
	}{result1}
}

func (fake *FakeSecurityUsecase) LogoutReturnsOnCall(i int, result1 error) {
	fake.logoutMutex.Lock()
	defer fake.logoutMutex.Unlock()
	fake.LogoutStub = nil
	if fake.logoutReturnsOnCall == nil {
		fake.logoutReturnsOnCall = make(map[int]struct {
			result1 error
		})
	}
	fake.logoutReturnsOnCall[i] = struct {
		result1 error
	}{result1}
}

func (fake *FakeSecurityUsecase) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.jwtGenerateRTATMutex.RLock()
	defer fake.jwtGenerateRTATMutex.RUnlock()
	fake.jwtValidateATMutex.RLock()
	defer fake.jwtValidateATMutex.RUnlock()
	fake.logoutMutex.RLock()
	defer fake.logoutMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *FakeSecurityUsecase) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}

var _ usecase.SecurityUsecase = new(FakeSecurityUsecase)
